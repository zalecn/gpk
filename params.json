{"tagline":"Gopack is a software dependency management tool for Golang","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Gopack","body":"gopack\r\n======\r\n\r\n<big>**Gopack** is a software dependency management tool for **Go**.\r\n\r\n**Gopack** keeps packages **dependency** information to build the GOPATH variable, it also keeps **remote** locations where to publish and get packages.\r\n\r\nIt can then deliver:\r\n\r\n* **Building** commands\r\n    * compile\r\n    * test\r\n* **Managing** commands\r\n    * list all dependencies (recursively)\r\n    * find and list missing imports, and fix them\r\n    * search for packages by name ( find the right version)\r\n* **Sharing** commands\r\n    * download packages from remote locations\r\n    * publish packages to remote locations\r\n    * search packages or imports in remote locations\r\n\r\n</big>\r\n\r\n\r\nGetting Started\r\n============\r\n\r\nVersion:   1.0.0.beta.1\r\n\r\n\r\n<small>\r\n<img alt=\"Under construction\" src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/5/54/Under_construction_icon-green.svg/200px-Under_construction_icon-green.svg.png\" height=\"33\" width=\"40\"/>\r\nThis section is still under development, it is kind of sparse (sorry)\r\n</small>\r\n\r\n\r\ninstalling it \r\n\r\nLinux\r\n--------\r\n\r\n<pre> \r\ngit clone git@github.com:eatienza/gopack.git\r\ncd gopack/\r\nexport GOPATH=`pwd`\r\ngo install ./src/...\r\nsudo cp ./bin/gpk /usr/bin/gpk\r\n</pre>\r\n\r\nNow you should have\r\n<pre>$>gpk help</pre>\r\n\r\n<pre>\r\n\r\nNAME\r\n       gpk - Gopack is a software dependency management tool for Golang.\r\n             It help Managing, Building, and Sharing libraries in Go.\r\n\r\nSYNOPSIS\r\n       gpk [general options] <command> [options]  \r\n\r\nOPTIONS\r\n       option   default              usage\r\n       -local   .gpkrepository       path to the local repository to be used by default.\r\n       -v       false                Print the version number.\r\n\r\n\r\nCOMMANDS\r\n\r\n       h        help                 Display help information about commands\r\n\r\n       !        init                 Initialize or Edit the current project\r\n       ?        status               Print status\r\n\r\n       c        compile              Compile project\r\n       t        test                 Run go test\r\n\r\n       d+       dadd                 Add dependency\r\n       d-       dremove              Remove dependency\r\n       ld       list-dependencies    List declared Dependencies.\r\n       lm       list-missing         Analyse the current directory and report or fix missing dependencies\r\n       lp       list-package         List all packages dependencies (recursive)\r\n\r\n       lr       list-remotes         List Remotes.\r\n       r+       radd                 Add a remote server.\r\n       r-       rremove              Remove a Remote\r\n\r\n       i        install              Install into the local repository\r\n       push     push                 Push a project in a remote repository\r\n       s        search               Search Packages .\r\n       serve    serve                Serve local repository as an http server\r\n\r\n\r\n       Type 'gpk help [COMMAND]' for more details about a command.\r\n</pre>\r\n\r\n\r\nExamples\r\n=========\r\n\r\nClient/Server\r\n-------------------\r\n\r\nOn computer called 'querepare' lets start a server (it does not need to be on a specific directory)\r\n<pre>\r\neric@querepare:$ gpk serve\r\n    starting server :8080\r\n</pre>\r\nIt will by default expose the local repository\r\n\r\nOn another computer called 'ubanoco' let's connect to this server\r\n<pre>eric@ubanoco:$ gpk r+ quere http://192.168.0.30:8080\r\n    new remote: quere http://192.168.0.30:8080\r\n</pre>\r\nLets search for stuff in it\r\n<pre>eric@ubanoco:$gpk search -r quere ericaro.net</pre>\r\nthe result list is empty\r\n\r\nLet's install the current project (gopack) as \"0.0.0-master\" in the local repository of ubanoco, and push it to quere\r\n<pre>eric@ubanoco:$ gpk install master</pre>\r\n<pre>eric@ubanoco:$ gpk push quere ericaro.net/gopack master\r\nSuccess\r\n</pre>\r\nNote that \"master\" is a valid name for the [semantic version](http://semver.org) 0.0.0-master.\r\n\r\nOn the server side here is what has happened\r\n<pre>\r\nRECEIVING\r\n       ericaro.net/gopack master GNU Lesser GPL INTO /home/eric/.gpkrepository/ericaro.net/gopack/master</pre>\r\n<small>due to issue #4 the output is not exactly the one above</small>\r\n\r\n\r\nNow, on the client side, if we search for package called ericaro.net we found one.\r\n\r\n<pre>eric@ubanoco:$ gpk s -r quere ericaro.net</pre>\r\n\r\n\r\n<h2>Dependencies</h2>\r\n \r\n\r\nLets work on another project, and we added some imports in the code:\r\n<pre>import (\r\n    \"ericaro.net/gopack/\"\r\n    \"ericaro.net/gopack/protocol\"\r\n    \"ericaro.net/gopack/semver\"\r\n\r\n)</pre>\r\n\r\nis it one two or three packages or only one ?\r\n\r\nThe project will not compile, right ?\r\n<pre>\r\n$ gpk c\r\nsrc/myproject/gae/services.go:6:2: import \"ericaro.net/gopack\": cannot find package\r\nsrc/myproject/gae/entities.go:8:2: import \"ericaro.net/gopack/protocol\": cannot find package\r\nsrc/myproject/gae/entities.go:9:2: import \"ericaro.net/gopack/semver\": cannot find package\r\nexit status 1\r\n</pre>\r\n<small>'gpk c' is short for 'gpk compile'</small>\r\n\r\nLet's fix the project\r\n\r\n<pre>$gpk lm -f\r\nMissing imports (3), missing packages (1)\r\nMissing packages ericaro.net/gopack                       -> ☑ ericaro.net/gopack 1.0.0-beta.1 \r\n                                                          -> ☐ ericaro.net/gopack master\r\nProject Updated\r\n</pre>\r\n<small>\r\n\r\n* 'gpk lm' is short for 'gpk list-missing'\r\n* -f stands for 'fix'\r\n\r\n</small>\r\n\r\nNow your project compiles, and the dependency is under control:\r\n<pre>$ gpk ld\r\n\r\nLIST OF DECLARED DEPENDENCIES:\r\n        google.com/appengine                     1.7.3\r\n        ericaro.net/gopack                       1.0.0-beta.1\r\n</pre>\r\n<small>'gpk ld' is short for 'gpk list-dependencies'\r\n</small>\r\n\r\n\r\n<pre>$ gpk lp -l\r\n\r\nLIST OF PACKAGES:\r\n        google.com/appengine                     1.7.3\r\n        code.google.com/p/goprotobuf/proto       default\r\n        ericaro.net/gopack                       1.0.0-beta.1\r\n\r\n</pre>\r\n<small>\r\n\r\n* 'gpk lp' is short for 'gpk list-package'\r\n* -l stands for 'list' by default 'gpk lp' prints the dependencies in a GOPATH way\r\n</small>\r\n\r\n**Tip** \r\n\r\nTyping\r\n           <pre>alias GP='export GOPATH=`gpk lp`'</pre>\r\nIn your shell is an easy way to to get an automatic GOPATH setter.\r\n\r\n\r\n","google":""}